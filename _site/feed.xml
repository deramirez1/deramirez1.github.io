<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-01-20T19:46:55-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Laboratory</title><subtitle>Data Science/Mathematics/DevOps</subtitle><author><name>David Ramirez</name><email>deramirez1@gmail.com</email></author><entry><title type="html">Brilliant.org: Euler’s Totient Function</title><link href="http://localhost:4000/brilliant-spherical-geometry/" rel="alternate" type="text/html" title="Brilliant.org: Euler’s Totient Function" /><published>2020-06-08T09:30:20-05:00</published><updated>2020-06-08T09:30:20-05:00</updated><id>http://localhost:4000/brilliant-spherical-geometry</id><content type="html" xml:base="http://localhost:4000/brilliant-spherical-geometry/"><![CDATA[<p>Number theory is a very interesting field of mathematics I’ve only recently became interested in. This week it looks like Euler’s Totient Function will be the topic, as always you can follow along at the <a href="https://brilliant.org/wiki/eulers-totient-function/">wiki</a>. Euler’s Totient Functions (also called the Phi function) counts the number of positive integers less than $n$ that are coprime to $n$. Coprime is just a way of saying that any pair of two numbers only share 1 as their greated common divisor.</p>

<p>For example:<br />
$25 = 5^2$ and $25(1)$<br />
$9 = 3^2$ and $9(1)$</p>

<p>The only common divisor between $25$ and $9$ is $1$. Thus, $25$ and $9$ are coprime to each other. The shorthand formula to express the count of coprime numbers up to $n$ is $\phi(n)$, which is the number of $m \in\mathbb{N}$ such that $1\leq m &lt; n$ and $gcd(m,n) = 1$.</p>

<h3 id="why-is-this-important">Why is this important?</h3>
<p>If you’re interested in building a cryptosystem you would be interested in this function. In fact, most cryptography is built on some form of number theory using modular arithemtic and very <strong>very</strong> large numbers. The essence of this boils down to private and public keys, and knowing the solution $\phi(n)$ allows one to break this code and get the private key, following RSA encruption.</p>

<h3 id="example">Example</h3>

<p>Let’s find $\phi(15)$</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># multiples of a number are numbers that leave remainder 0
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">15</span><span class="p">):</span>
    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">remainder</span> <span class="o">=</span> <span class="mi">15</span> <span class="o">%</span> <span class="n">i</span>
    <span class="k">if</span> <span class="n">remainder</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s"> has remainder </span><span class="si">{</span><span class="n">remainder</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 has remainder 0
3 has remainder 0
5 has remainder 0
15 has remainder 0
</code></pre></div></div>

<p>We have 4 numbers that contain a remainder of $0: 1, 3, 5,$ and $15$. We can ignore $1$ and $15$ since $1$ is divisable by all numbers. Let’s rewrite the equation to remove $1$ and $15$, and all future instance of that.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># multiples of a number are numbers that leave remainder 0, now removing 1 and the last number
</span><span class="n">num</span> <span class="o">=</span> <span class="mi">15</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
    <span class="n">remainder</span> <span class="o">=</span> <span class="mi">15</span> <span class="o">%</span> <span class="n">i</span>
    <span class="k">if</span> <span class="n">remainder</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s"> has remainder </span><span class="si">{</span><span class="n">remainder</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3 has remainder 0
5 has remainder 0
</code></pre></div></div>

<p>Perfect, now that we know which numbers are multiples of $15$ we need to eliminate all their multiples up to $15$. Remember, $\phi(n)$ counts all coprime numbers up to $n$. We remove all multiples because those multiples are not coprime to $15$. As an example, $10$ equals $5(2)$ and $1(10)$, $15$ is a mutliple of $5$. Since we’re only interested in coprime numbers $10$ does no make the cut, but $14$ would. $14$ is a made up of two prime numbers $7$ and $2$. Both those numbers are not multiples of $15$ so $14$ counts and so does $2$ and $7$.</p>

<p>To start, represent $m$ as a coprime number to $n$. The count of all the $m$s is going to be less than the range of $n$. Which is represented by the inequality above: the number of $m \in\mathbb{N}$ such that $1\leq m &lt; n$. Once we get all the $m$s we can take the whole range of $n$ and subtract the range of $m$.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">timeit</span>
<span class="n">num</span> <span class="o">=</span> <span class="mi">15</span>
<span class="n">divisors</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1"># create a list of all the divisors of n
</span><span class="n">remove_numbers</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1"># append all mutliples of the divisors of n to an emptry list
</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
    <span class="n">remainder</span> <span class="o">=</span> <span class="mi">15</span> <span class="o">%</span> <span class="n">i</span>
    <span class="k">if</span> <span class="n">remainder</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">divisors</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        
<span class="k">for</span> <span class="n">div</span> <span class="ow">in</span> <span class="n">divisors</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">remainder</span> <span class="o">=</span> <span class="n">i</span> <span class="o">%</span> <span class="n">div</span>
        <span class="k">if</span> <span class="n">remainder</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">remove_numbers</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2.53 µs ± 75.2 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numbers_to_n</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">num</span><span class="p">))</span>
<span class="sa">f</span><span class="s">'The number of coprime numbers from 1-n, solving ϕ(n): </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">numbers_to_n</span><span class="p">)</span> <span class="o">-</span> <span class="nb">set</span><span class="p">(</span><span class="n">remove_numbers</span><span class="p">))</span><span class="si">}</span><span class="s">'</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'The number of coprime numbers from 1-n, solving ϕ(n): 8'
</code></pre></div></div>

<p>This solved the equation and it’s relatively fast but it won’t scale. If we needed to run this on really large numbers this would take a while. For example, let’s change the number to something 1,000 times greater and see what the run time is.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">timeit</span>
<span class="n">num</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span><span class="o">*</span><span class="mi">1001</span><span class="p">)</span>
<span class="n">divisors</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1"># create a list of all the divisors of n
</span><span class="n">remove_numbers</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1"># append all mutliples of the divisors of n to an emptry list
</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
    <span class="n">remainder</span> <span class="o">=</span> <span class="mi">15</span> <span class="o">%</span> <span class="n">i</span>
    <span class="k">if</span> <span class="n">remainder</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">divisors</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        
<span class="k">for</span> <span class="n">div</span> <span class="ow">in</span> <span class="n">divisors</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">remainder</span> <span class="o">=</span> <span class="n">i</span> <span class="o">%</span> <span class="n">div</span>
        <span class="k">if</span> <span class="n">remainder</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">remove_numbers</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2.86 ms ± 49.7 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</code></pre></div></div>

<p>The runtime for this is 2.86 ms which is roughly 1,000 times that of the 2.51 $\mu$s. I suspect at best they scale linearly, the higher the $n$ the more slowly it will run. Luckly, a lot of this math is already worked for us. The <a href="https://www.sympy.org/en/index.html">SymPy</a> package takes care of a lot of the heavy lifting for getting the totient.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sympy.ntheory</span> <span class="kn">import</span> <span class="n">totient</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">timeit</span>
<span class="n">totient</span><span class="p">(</span><span class="mi">15</span><span class="o">*</span><span class="mi">1001</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>227 ns ± 4.25 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre></div></div>

<p>Wow! That was a million times faster than the equation I ran before. This would definitely scale much better. But how does SymPy have such a fast equation? A part of the answer is what I wrote was brute force, required holding memory of each multiplicative, and each number up to $n$. But more importantly, I’m not running the best equation to figure something like this out. It’s much faster to find some factors of $n$ such that $n = ab$, where the $\gcd(a,b) = 1$ (indicating these are two coprime numbers). That is not a trival ask, and makes light of how difficult it can be to find. But for this theorum, the problem is now broken down into a much easier set of numbers. Since $ab = n$, if we find all the prime multiplicatives of $a$ we have found prime numbers between 1 and $n$, same goes for $b$. And, since $a$ can be large if $n$ is large, we can simplify our notation and make it more general, like’s call it $p^k$ where $p$ is some prime number raised to the power of $k$, which equals $a$. Heres an example:</p>

<p>$5^{2} = 25$</p>

<p>$25$ ($a$) is made up of two numbers multiplied by each other, specifically $5$ ($b$). Thus $25$ equals $5$ raised to the power of $2$ ($k$).</p>

<p>Sticking with that example, since $25$ is coprime $b$ (remember statisfying $\gcd(25,b) = 1$) that means all of $a$’s multiplicatives statisfy this requirement, $5^{1}, 5^{2}, 5^{3}…, 5^{k}$. However, the formal range only needs to extend up to $a$, $[1,p^{k}]$, where $p^{k}$ in our example is $25$. There is a formula that generalizes this more and we’re going to use it:</p>

<p>$\phi(p^{k}) = p^{(k - 1)}(p - 1)$</p>

<p><a href="https://en.wikipedia.org/wiki/Euler%27s_totient_function">Proof</a>: since $p$ is a prime number the only possible values of $\gcd(p^k, b)$ are $1, p, p^2, …, p^k$, and the only way for $\gcd(p^k, b)$ to not equal 1 is for $b$ to be a multiple of $p$. The multiples of $p$ that are less than or equal to $p^k$ are $p, 2p, 3p, …, p^{k − 1}p = p^k$, and there are $p^{k − 1}$ of them. Therefore, the other $p^k − p^{(k − 1)}$ numbers are all relatively prime to $p^k$.</p>

<p>There’s one more detail that we need to put this all together. Since the totient is multiplicative, $ab = n$, we can multiply the counts of primes from $a$ and $b$. Since $a$ and $b$ have a $\gcd(a,b) = 1$ each prime composing $a$ or $b$ is unique. Thus, all $ab$ pairings, their respective primes multiplied by each other, are unique to $n$ and coprime to $n$. Again, this is not a trival fact but it’s very powerful.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sympy.ntheory.factor_</span> <span class="kn">import</span> <span class="n">factorint</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">factors</span> <span class="o">=</span> <span class="n">factorint</span><span class="p">(</span><span class="mi">15</span><span class="o">*</span><span class="mi">1001</span><span class="p">)</span>
<span class="n">factors</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{3: 1, 5: 1, 7: 1, 11: 1, 13: 1}
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">timeit</span>
<span class="n">t</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">for</span> <span class="n">p</span><span class="p">,</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">factors</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">t</span> <span class="o">*=</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">p</span><span class="o">**</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>588 ns ± 5.29 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre></div></div>

<p>I used SymPy’s factorint function to get the factors for $n$. Then I applied SymPy’s formula for finding all the primes factors of $n$. For example, $3$ is a factor of $15(1001)$. Looping through each factor and it’s power, multiplying $t$ each time it passes, produces the correct number of primes from $1$ to $n$. This is the same equation SymPy uses. It’s still slightly slower than the original SymPy function but it’s still significantly faster than the original, around a million times.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>]]></content><author><name>David Ramirez</name><email>deramirez1@gmail.com</email></author><category term="Math" /><category term="Modular Arithmetic" /><summary type="html"><![CDATA[A brief pass at Euler's Totient Function]]></summary></entry><entry><title type="html">Brilliant.org: Spherical Geometry</title><link href="http://localhost:4000/brilliant-spherical-geometry/" rel="alternate" type="text/html" title="Brilliant.org: Spherical Geometry" /><published>2020-05-30T09:30:20-05:00</published><updated>2020-05-30T09:30:20-05:00</updated><id>http://localhost:4000/brilliant-spherical-geometry</id><content type="html" xml:base="http://localhost:4000/brilliant-spherical-geometry/"><![CDATA[<p>I’m quite the avid proponent of <a href="https://brilliant.org/">Brilliant.org</a>. It’s a great way to refine, build, and practice new mathematical concepts. I’m going to do a series of Brillant posts, one every week, on a very specific topic in math. This week, and post number 1, is spherical geometry.</p>

<p>If you want to follow along you can refer to this <a href="https://brilliant.org/wiki/spherical-geometry/">wiki</a>.</p>

<h2 id="spherical-geometry">Spherical Geometry</h2>

<p>Spherical geometry is the study of objects on a sphere. It’s similar to Euclidean geometry in that lines, points, and angles are the main tools for understanding those objects. There are three main differences though:</p>

<ol>
  <li>There are no parallel lines in spherical geometry. In fact, all great circles, which is the plane that intersects the center of mass of the sphere, intersects in two antipodal points, opposite points of the sphere. <strong>Straight lines are great circles</strong>.</li>
  <li>Angles in a triangle (each side of which is an arc of a great circle) add up to more than 180 degrees.</li>
  <li>Line segments (arcs of great circles) have bounded length, and regions on the surface of the sphere have bounded area.</li>
</ol>

<h2 id="why-learn-about-spherical-geometry">Why learn about spherical geometry?</h2>
<p>If you’re interested in understanding angles, areas, and distances on Earth this is a very important field. It’s relevant for navigation, cosmology, astronomey, and applications of stereographic projection, think maps (cartography).</p>

<p>I’ll only use numpy to help illustrate some of the properties of spherical geometry and play around with some examples.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
</code></pre></div></div>

<h2 id="the-minimal-distance">The minimal distance</h2>

<p><a href="https://en.wikipedia.org/wiki/Great-circle_distance">The great-circle distance or orthodromic distance is the shortest distance between two points on the surface of the sphere, measured on the the surface of the sphere.</a> The distance between two points is therefore $R\phi$, where $R$ is the radius of the sphere and $\phi$ is the measure (in radians) of the central angle subtended by the radii, a line drawn on the surface of sphere by said angle, to the two points.</p>

<h3 id="example">Example:</h3>
<p>Taking the example from Brilliant: What is the minimal distance on the sphere, centered at the origin and of radius 2, between points $(1, 1, \sqrt{2})$ and $(-1, 1, \sqrt{2})$?</p>

<p>Let’s break this down. We received two vectors, $(1, 1, \sqrt{2})$ and $(-1, 1, \sqrt{2})$, our radius is 2, and now we need our equation. There are several equations we could use, but to stay consistent with the training material on Brilliant I’ll use the Vector version:</p>

<p>$d = R\Delta\phi$ <br />
$R^{2}\Delta\phi = \cos(v_{1} \cdot v_{2})$</p>

<p>Where $d$ is the distance on the sphere, $R$ is the radius of the sphere, and $v_{1}$ and $v_{2}$ are the normals to the ellipsoid at the two positions 1 and 2. The normals are the perpendicular lines to poisition’s tangnet line on the sphere.</p>

<p>Using the vector equation we need to find the <a href="https://mathworld.wolfram.com/DotProduct.html">dot product</a> of the two vectors. From there we can find the angle, and then the distance using the radius, $R$.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create two vectors
</span>
<span class="n">A</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">)]</span>
<span class="n">B</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">)]</span>

<span class="c1"># get the dot product
</span><span class="n">dot_product</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>

<span class="n">dot_product</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2.0000000000000004
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">R</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1"># radius
</span><span class="n">ϕ</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arccos</span><span class="p">(</span><span class="n">dot_product</span><span class="o">/</span><span class="p">(</span><span class="n">R</span> <span class="o">**</span> <span class="mi">2</span><span class="p">))</span>

<span class="c1"># our angle
</span><span class="k">print</span><span class="p">(</span><span class="s">"Our angle is equal to: "</span><span class="p">,</span> <span class="n">ϕ</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"This is 1/3 of π: "</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Our angle is equal to:  1.0471975511965976
This is 1/3 of π:  1.0471975511965976
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># therefore, the distance is
</span><span class="n">Rϕ</span> <span class="o">=</span> <span class="n">R</span> <span class="o">*</span> <span class="n">ϕ</span>

<span class="k">print</span><span class="p">(</span><span class="s">"The minimal distance given the two vectors is: "</span><span class="p">,</span> <span class="n">Rϕ</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"This is equal to 2π/3: "</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The minimal distance given the two vectors is:  2.0943951023931953
This is equal to 2π/3:  2.0943951023931953
</code></pre></div></div>

<p>Now that we have a functional example, let’s extend this to allow for many points that might come in as vectors.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">spherical_distance_vectors</span><span class="p">(</span><span class="n">point_A</span><span class="p">,</span> <span class="n">point_B</span><span class="p">,</span> <span class="n">radius</span><span class="p">):</span>
    <span class="n">dot_product</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">point_A</span><span class="p">,</span> <span class="n">point_B</span><span class="p">)</span>
    <span class="n">ϕ</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arccos</span><span class="p">(</span><span class="n">dot_product</span> <span class="o">/</span> <span class="p">(</span><span class="n">radius</span> <span class="o">**</span> <span class="mi">2</span><span class="p">))</span>
    <span class="n">distance</span> <span class="o">=</span> <span class="n">radius</span> <span class="o">*</span> <span class="n">ϕ</span>
    <span class="k">return</span> <span class="k">print</span><span class="p">(</span><span class="s">"The distance between points"</span><span class="p">,</span> <span class="n">point_A</span><span class="p">,</span> <span class="s">"and"</span><span class="p">,</span> <span class="n">point_B</span><span class="p">,</span><span class="s">"is equal to:"</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">round_</span><span class="p">(</span><span class="n">distance</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vectors</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">random_sample</span><span class="p">((</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span> <span class="c1"># create a matrix (x , 3). I picked 5 by 3.
</span><span class="n">radius</span> <span class="o">=</span> <span class="mf">20.</span> <span class="c1"># set the radius
</span><span class="n">vectors</span><span class="p">[:,</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">radius</span><span class="p">)</span> <span class="c1"># append the radius to the last column
</span><span class="n">vectors</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([[7.38566540e-03, 3.24902955e+00, 4.47213595e+00],
       [4.17878062e+00, 6.28529588e+00, 4.47213595e+00],
       [6.42920002e+00, 1.73161261e+00, 4.47213595e+00],
       [8.47919453e+00, 1.00304819e+00, 4.47213595e+00],
       [6.33512133e+00, 6.60878065e+00, 4.47213595e+00]])
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">combinations</span>

<span class="n">combinations</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">combinations</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="mi">2</span><span class="p">))</span> <span class="c1"># generate a genertic index list to use to get the right points without duplicate analysis
</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">combinations</span><span class="p">)):</span>
    <span class="n">spherical_distance_vectors</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">round_</span><span class="p">(</span><span class="n">vectors</span><span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="n">combinations</span><span class="p">[</span><span class="n">i</span><span class="p">])[</span><span class="mi">0</span><span class="p">]],</span><span class="mi">3</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="n">round_</span><span class="p">(</span><span class="n">vectors</span><span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="n">combinations</span><span class="p">[</span><span class="n">i</span><span class="p">])[</span><span class="mi">1</span><span class="p">]],</span><span class="mi">3</span><span class="p">),</span> <span class="n">radius</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The distance between points [0.007 3.249 4.472] and [4.179 6.285 4.472] is equal to: 29.39
The distance between points [0.007 3.249 4.472] and [6.429 1.732 4.472] is equal to: 30.131
The distance between points [0.007 3.249 4.472] and [8.479 1.003 4.472] is equal to: 30.249
The distance between points [0.007 3.249 4.472] and [6.335 6.609 4.472] is equal to: 29.336
The distance between points [4.179 6.285 4.472] and [6.429 1.732 4.472] is equal to: 28.518
The distance between points [4.179 6.285 4.472] and [8.479 1.003 4.472] is equal to: 28.317
The distance between points [4.179 6.285 4.472] and [6.335 6.609 4.472] is equal to: 26.979
The distance between points [6.429 1.732 4.472] and [8.479 1.003 4.472] is equal to: 27.58
The distance between points [6.429 1.732 4.472] and [6.335 6.609 4.472] is equal to: 27.787
The distance between points [8.479 1.003 4.472] and [6.335 6.609 4.472] is equal to: 27.371
</code></pre></div></div>

<h3 id="vector-distance-plotted">Vector Distance Plotted</h3>

<p>This is nice but it could be beneficial to see the distance laid out for us. Luckly, that’s doable with matplotlib and this handy work from <a href="&quot;https://stackoverflow.com/questions/11140163/plotting-a-3d-cube-a-sphere-and-a-vector-in-matplotlib&quot;">stack overflow</a>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">mpl_toolkits.mplot3d</span> <span class="kn">import</span> <span class="n">Axes3D</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">product</span><span class="p">,</span> <span class="n">combinations</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="n">gca</span><span class="p">(</span><span class="n">projection</span> <span class="o">=</span> <span class="s">'3d'</span><span class="p">)</span>

<span class="c1"># draw the sphere we want to plot
</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mgrid</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="p">:</span><span class="mf">20j</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="p">:</span><span class="mf">10j</span><span class="p">]</span>
<span class="n">x</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">cos</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
<span class="n">z</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">cos</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot_wireframe</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">"r"</span><span class="p">)</span>

<span class="c1"># draw a point
</span><span class="n">ax</span><span class="p">.</span><span class="n">scatter</span><span class="p">([</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="s">"g"</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>

<span class="c1"># draw a vector
</span><span class="kn">from</span> <span class="nn">matplotlib.patches</span> <span class="kn">import</span> <span class="n">FancyArrowPatch</span>
<span class="kn">from</span> <span class="nn">mpl_toolkits.mplot3d</span> <span class="kn">import</span> <span class="n">proj3d</span>


<span class="k">class</span> <span class="nc">Arrow3D</span><span class="p">(</span><span class="n">FancyArrowPatch</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">xs</span><span class="p">,</span> <span class="n">ys</span><span class="p">,</span> <span class="n">zs</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">FancyArrowPatch</span><span class="p">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">_verts3d</span> <span class="o">=</span> <span class="n">xs</span><span class="p">,</span> <span class="n">ys</span><span class="p">,</span> <span class="n">zs</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">renderer</span><span class="p">):</span>
        <span class="n">xs3d</span><span class="p">,</span> <span class="n">ys3d</span><span class="p">,</span> <span class="n">zs3d</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_verts3d</span>
        <span class="n">xs</span><span class="p">,</span> <span class="n">ys</span><span class="p">,</span> <span class="n">zs</span> <span class="o">=</span> <span class="n">proj3d</span><span class="p">.</span><span class="n">proj_transform</span><span class="p">(</span><span class="n">xs3d</span><span class="p">,</span> <span class="n">ys3d</span><span class="p">,</span> <span class="n">zs3d</span><span class="p">,</span> <span class="n">renderer</span><span class="p">.</span><span class="n">M</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">set_positions</span><span class="p">((</span><span class="n">xs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">ys</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="p">(</span><span class="n">xs</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">ys</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
        <span class="n">FancyArrowPatch</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">renderer</span><span class="p">)</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">Arrow3D</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">)],</span> <span class="n">mutation_scale</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span>
            <span class="n">lw</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">arrowstyle</span><span class="o">=</span><span class="s">"-|&gt;"</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">"k"</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">Arrow3D</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">)],</span> <span class="n">mutation_scale</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span>
            <span class="n">lw</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">arrowstyle</span><span class="o">=</span><span class="s">"-|&gt;"</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">"k"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">add_artist</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">add_artist</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/img/output-spherical-geometry.png" alt="3D-Sphere" /></p>]]></content><author><name>David Ramirez</name><email>deramirez1@gmail.com</email></author><category term="Math" /><category term="Geometry" /><category term="Linear Algebra" /><summary type="html"><![CDATA[An introduction to Spherical Geometry]]></summary></entry></feed>