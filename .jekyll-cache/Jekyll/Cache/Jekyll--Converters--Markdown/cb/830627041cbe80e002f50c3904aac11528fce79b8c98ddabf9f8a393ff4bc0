I"‘]<p>Iâ€™m quite the avid proponent of <a href="https://brilliant.org/">Brilliant.org</a>. Itâ€™s a great way to refine, build, and practice new mathematical concepts. Iâ€™m going to do a series of Brillant posts, one every week, on a very specific topic in math. This week, and post number 1, is spherical geometry.</p>

<p>If you want to follow along you can refer to this <a href="https://brilliant.org/wiki/spherical-geometry/">wiki</a>.</p>

<h2 id="spherical-geometry">Spherical Geometry</h2>

<p>Spherical geometry is the study of objects on a sphere. Itâ€™s similar to Euclidean geometry in that lines, points, and angles are the main tools for understanding those objects. There are three main differences though:</p>

<ol>
  <li>There are no parallel lines in spherical geometry. In fact, all great circles, which is the plane that intersects the center of mass of the sphere, intersects in two antipodal points, opposite points of the sphere. See picture below. Straight lines are great circles.</li>
  <li>Angles in a triangle (each side of which is an arc of a great circle) add up to more than 180 degrees.</li>
  <li>Line segments (arcs of great circles) have bounded length, and regions on the surface of the sphere have bounded area.</li>
</ol>

<h3 id="why-learn-about-spherical-geometry">Why learn about spherical geometry?</h3>
<p>If youâ€™re interested in understanding angles, areas, and distances on Earth this is a very important field. Itâ€™s relevant for navigation, cosmology, astronomey, and applications of stereographic projection, think maps (cartography).</p>

<p>Iâ€™ll only use numpy to help illustrate some of the properties of spherical geometry and play around with some examples.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
</code></pre></div></div>

<h3 id="the-minimal-distance">The minimal distance</h3>

<p><a href="https://en.wikipedia.org/wiki/Great-circle_distance">The great-circle distance or orthodromic distance is the shortest distance between two points on the surface of the sphere, measured on the the surface of the sphere.</a> The distance between two points is therefore $R\phi$, where $R$ is the radius of the sphere and $\phi$ is the measure (in radians) of the central angle subtended by the radii, a line drawn on the surface of sphere by said angle, to the two points.</p>

<h3 id="example">Example:</h3>
<p>Taking the example from Brilliant: What is the minimal distance on the sphere, centered at the origin and of radius 2, between points $(1, 1, \sqrt{2})$ and $(-1, 1, \sqrt{2})$?</p>

<p>Letâ€™s break this down. We received two vectors, $(1, 1, \sqrt{2})$ and $(-1, 1, \sqrt{2})$, our radius is 2, and now we need our equation. There are several version of equations we could use, but to stay consistent with the training material on Brilliant Iâ€™ll use Vector version:</p>

<p>$d = R\Delta\phi$ <br />
$R^{2}\Delta\phi = \cos(v_{1} \cdot v_{2})$</p>

<p>Where $d$ is the distance on the sphere, $R$ is the radius of the sphere, and $v_{1}$ and $v_{2}$ are the normals to the ellipsoid at the two positions 1 and 2. The normals are the perpendicular lines to poisitionâ€™s tangnet line on the sphere.</p>

<p>Using the vector equation we need to find the <a href="https://mathworld.wolfram.com/DotProduct.html">dot product</a> of the two vectors. From there we can find the angle, and then the distance using the radius, $R$.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create two vectors
</span>
<span class="n">A</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">)]</span>
<span class="n">B</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">)]</span>

<span class="c1"># get the dot product
</span><span class="n">dot_product</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>

<span class="n">dot_product</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2.0000000000000004
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">R</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1"># radius
</span><span class="n">Ï•</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arccos</span><span class="p">(</span><span class="n">dot_product</span><span class="o">/</span><span class="p">(</span><span class="n">R</span> <span class="o">**</span> <span class="mi">2</span><span class="p">))</span>

<span class="c1"># our angle
</span><span class="k">print</span><span class="p">(</span><span class="s">"Our angle is equal to: "</span><span class="p">,</span> <span class="n">Ï•</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"This is 1/3 of Ï€: "</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Our angle is equal to:  1.0471975511965976
This is 1/3 of Ï€:  1.0471975511965976
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># therefore, the distance is
</span><span class="n">RÏ•</span> <span class="o">=</span> <span class="n">R</span> <span class="o">*</span> <span class="n">Ï•</span>

<span class="k">print</span><span class="p">(</span><span class="s">"The minimal distance given the two vectors is: "</span><span class="p">,</span> <span class="n">RÏ•</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"This is equal to 2Ï€/3: "</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The minimal distance given the two vectors is:  2.0943951023931953
This is equal to 2Ï€/3:  2.0943951023931953
</code></pre></div></div>

<p>Now that we have a functional example, letâ€™s extend this to allow for many points that might come in as vectors.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">spherical_distance_vectors</span><span class="p">(</span><span class="n">point_A</span><span class="p">,</span> <span class="n">point_B</span><span class="p">,</span> <span class="n">radius</span><span class="p">):</span>
    <span class="n">dot_product</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">point_A</span><span class="p">,</span> <span class="n">point_B</span><span class="p">)</span>
    <span class="n">Ï•</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arccos</span><span class="p">(</span><span class="n">dot_product</span> <span class="o">/</span> <span class="p">(</span><span class="n">radius</span> <span class="o">**</span> <span class="mi">2</span><span class="p">))</span>
    <span class="n">distance</span> <span class="o">=</span> <span class="n">radius</span> <span class="o">*</span> <span class="n">Ï•</span>
    <span class="k">return</span> <span class="k">print</span><span class="p">(</span><span class="s">"The distance between points"</span><span class="p">,</span> <span class="n">point_A</span><span class="p">,</span> <span class="s">"and"</span><span class="p">,</span> <span class="n">point_B</span><span class="p">,</span><span class="s">"is equal to:"</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">round_</span><span class="p">(</span><span class="n">distance</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vectors</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">random_sample</span><span class="p">((</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span> <span class="c1"># create a matrix (x , 3). I picked 5 by 3.
</span><span class="n">radius</span> <span class="o">=</span> <span class="mf">20.</span> <span class="c1"># set the radius
</span><span class="n">vectors</span><span class="p">[:,</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">radius</span><span class="p">)</span> <span class="c1"># append the radius to the last column
</span><span class="n">vectors</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([[7.38566540e-03, 3.24902955e+00, 4.47213595e+00],
       [4.17878062e+00, 6.28529588e+00, 4.47213595e+00],
       [6.42920002e+00, 1.73161261e+00, 4.47213595e+00],
       [8.47919453e+00, 1.00304819e+00, 4.47213595e+00],
       [6.33512133e+00, 6.60878065e+00, 4.47213595e+00]])
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">combinations</span>

<span class="n">combinations</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">combinations</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="mi">2</span><span class="p">))</span> <span class="c1"># generate a genertic index list to use to get the right points without duplicate analysis
</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">combinations</span><span class="p">)):</span>
    <span class="n">spherical_distance_vectors</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">round_</span><span class="p">(</span><span class="n">vectors</span><span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="n">combinations</span><span class="p">[</span><span class="n">i</span><span class="p">])[</span><span class="mi">0</span><span class="p">]],</span><span class="mi">3</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="n">round_</span><span class="p">(</span><span class="n">vectors</span><span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="n">combinations</span><span class="p">[</span><span class="n">i</span><span class="p">])[</span><span class="mi">1</span><span class="p">]],</span><span class="mi">3</span><span class="p">),</span> <span class="n">radius</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The distance between points [0.007 3.249 4.472] and [4.179 6.285 4.472] is equal to: 29.39
The distance between points [0.007 3.249 4.472] and [6.429 1.732 4.472] is equal to: 30.131
The distance between points [0.007 3.249 4.472] and [8.479 1.003 4.472] is equal to: 30.249
The distance between points [0.007 3.249 4.472] and [6.335 6.609 4.472] is equal to: 29.336
The distance between points [4.179 6.285 4.472] and [6.429 1.732 4.472] is equal to: 28.518
The distance between points [4.179 6.285 4.472] and [8.479 1.003 4.472] is equal to: 28.317
The distance between points [4.179 6.285 4.472] and [6.335 6.609 4.472] is equal to: 26.979
The distance between points [6.429 1.732 4.472] and [8.479 1.003 4.472] is equal to: 27.58
The distance between points [6.429 1.732 4.472] and [6.335 6.609 4.472] is equal to: 27.787
The distance between points [8.479 1.003 4.472] and [6.335 6.609 4.472] is equal to: 27.371
</code></pre></div></div>

<h3 id="vector-distance-plotted">Vector Distance Plotted</h3>

<p>This is nice but it could be beneficial to see the distance laid out for us. Luckly, thatâ€™s doable with matplotlib and this handy work from <a href="&quot;https://stackoverflow.com/questions/11140163/plotting-a-3d-cube-a-sphere-and-a-vector-in-matplotlib&quot;">stack overflow</a>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">mpl_toolkits.mplot3d</span> <span class="kn">import</span> <span class="n">Axes3D</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">product</span><span class="p">,</span> <span class="n">combinations</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="n">gca</span><span class="p">(</span><span class="n">projection</span> <span class="o">=</span> <span class="s">'3d'</span><span class="p">)</span>

<span class="c1"># draw the sphere we want to plot
</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mgrid</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="p">:</span><span class="mf">20j</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="p">:</span><span class="mf">10j</span><span class="p">]</span>
<span class="n">x</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">cos</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
<span class="n">z</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">cos</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot_wireframe</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">"r"</span><span class="p">)</span>

<span class="c1"># draw a point
</span><span class="n">ax</span><span class="p">.</span><span class="n">scatter</span><span class="p">([</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="s">"g"</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>

<span class="c1"># draw a vector
</span><span class="kn">from</span> <span class="nn">matplotlib.patches</span> <span class="kn">import</span> <span class="n">FancyArrowPatch</span>
<span class="kn">from</span> <span class="nn">mpl_toolkits.mplot3d</span> <span class="kn">import</span> <span class="n">proj3d</span>


<span class="k">class</span> <span class="nc">Arrow3D</span><span class="p">(</span><span class="n">FancyArrowPatch</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">xs</span><span class="p">,</span> <span class="n">ys</span><span class="p">,</span> <span class="n">zs</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">FancyArrowPatch</span><span class="p">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">_verts3d</span> <span class="o">=</span> <span class="n">xs</span><span class="p">,</span> <span class="n">ys</span><span class="p">,</span> <span class="n">zs</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">renderer</span><span class="p">):</span>
        <span class="n">xs3d</span><span class="p">,</span> <span class="n">ys3d</span><span class="p">,</span> <span class="n">zs3d</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_verts3d</span>
        <span class="n">xs</span><span class="p">,</span> <span class="n">ys</span><span class="p">,</span> <span class="n">zs</span> <span class="o">=</span> <span class="n">proj3d</span><span class="p">.</span><span class="n">proj_transform</span><span class="p">(</span><span class="n">xs3d</span><span class="p">,</span> <span class="n">ys3d</span><span class="p">,</span> <span class="n">zs3d</span><span class="p">,</span> <span class="n">renderer</span><span class="p">.</span><span class="n">M</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">set_positions</span><span class="p">((</span><span class="n">xs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">ys</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="p">(</span><span class="n">xs</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">ys</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
        <span class="n">FancyArrowPatch</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">renderer</span><span class="p">)</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">Arrow3D</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">)],</span> <span class="n">mutation_scale</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span>
            <span class="n">lw</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">arrowstyle</span><span class="o">=</span><span class="s">"-|&gt;"</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">"k"</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">Arrow3D</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">)],</span> <span class="n">mutation_scale</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span>
            <span class="n">lw</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">arrowstyle</span><span class="o">=</span><span class="s">"-|&gt;"</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">"k"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">add_artist</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">add_artist</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/deramirez1.github.io/assets/img/output-spherical-geometry.png" alt="3D-Sphere" /></p>
:ET